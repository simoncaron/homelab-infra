---
# roles/newt/tasks/main.yml
- name: Check if running as root or with sudo
  ansible.builtin.fail:
    msg: This role requires root privileges
  when: ansible_user_id != 'root'
  ignore_errors: "{{ ansible_check_mode }}"

- name: Check if Newt is already installed
  ansible.builtin.command: which newt
  register: newt_which
  changed_when: false
  failed_when: false

- name: Get installed Newt version (if exists)
  ansible.builtin.command: newt --version
  register: newt_version_check
  changed_when: false
  failed_when: false
  when: newt_which.rc == 0

- name: Set fact for installed version
  ansible.builtin.set_fact:
    installed_version: "{{ newt_version_check.stdout | regex_search('Newt version ([0-9]+\\.[0-9]+\\.[0-9]+)', '\\1') | first | default('none') }}"
  when: newt_which.rc == 0 and newt_version_check.rc == 0

- name: Set fact for installed version (if not found)
  ansible.builtin.set_fact:
    installed_version: none
  when: newt_which.rc != 0 or newt_version_check.rc != 0

- name: Debug installation status
  ansible.builtin.debug:
    msg: >-
      Newt installation status: {% if installed_version == 'none' %}Not installed{% else %}Installed version {{ installed_version }}{% endif %}

- name: Set architecture variable
  ansible.builtin.set_fact:
    arch_type: >-
      {%- if ansible_architecture == 'x86_64' -%}amd64{%- elif ansible_architecture.startswith('arm') or ansible_architecture == 'aarch64' -%}arm64{%- else -%}unknown{%- endif -%}

- name: Fail if unsupported architecture
  ansible.builtin.fail:
    msg: Unsupported architecture ({{ ansible_architecture }})
  when: arch_type == 'unknown'

- name: Set binary name
  ansible.builtin.set_fact:
    binary_name: newt_linux_{{ arch_type }}
  when: installed_version == 'none' or installed_version != newt_version

- name: Download Newt binary
  ansible.builtin.get_url:
    url: https://github.com/fosrl/newt/releases/download/{{ newt_version }}/{{ binary_name }}
    dest: /tmp/newt
    mode: "0755"
  register: download_result
  when: installed_version == 'none' or installed_version != newt_version

- name: Move Newt binary to /usr/local/bin
  ansible.builtin.copy:
    src: /tmp/newt
    dest: /usr/local/bin/newt
    mode: "0755"
    remote_src: true
  when: download_result is changed
  notify: Restart Newt service

- name: Create systemd service file
  ansible.builtin.template:
    src: newt.service.j2
    dest: /etc/systemd/system/newt.service
    mode: "0644"
  register: service_file

- name: Reload systemd
  ansible.builtin.systemd:
    daemon_reload: true
  when: service_file is changed

- name: Enable and start Newt service
  ansible.builtin.systemd:
    name: newt
    enabled: true
    state: started

- name: Clean up temporary files
  ansible.builtin.file:
    path: /tmp/newt
    state: absent
  when: download_result is defined and download_result is changed
